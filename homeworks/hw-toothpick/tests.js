import { toggle } from '../../src/utils'
import { showMessage } from '../../src/HwInstructions'


const steps = {
    introduction: 1,
    about_javascript: 2,
    first_line: 3,
    function_arguments: 4,
    variables: 5,
    where_were_we: 6,
}

export function generateTests(CONFIG) {
    CONFIG.hints = true
    CONFIG.isStep(steps.introduction) && describe("1. შესავალი", () => {
        it('გამარჯობა! დღევანდელი სავარჯიშოთი ძალიან იხალისებ და ბევრ ახალს გაიგებ. სანამ პროგრამირების შესავალს გავივლიდეთ, შეგიძლია იფიქრო, როგორ შეიძლება დიდი ტექსტისთვის ფორმატის შეცვლა ისე, რომ ზომაში შემცირდეს მაგრამ ინფორმაცია არ დაკარგოს. ამ პროცესს ენკოდირება ეწოდება. საორიენტაციო ნაბიჯების შემდეგ ისევ მოვუბრუნდებით ამ ამოცანას და ნაბიჯ-ნაბიჯ მოგცემ მინიშნებებს.')
    })

    CONFIG.isStep(steps.about_javascript) && describe("2. რა არის ჯავასკრიპტი", () => {
        toggle('help')
        showMessage('კონსოლის-გახსნა')
        it(`საიტები (მათ შორის ესეც), გაგონილი გექნება, რომ კოდითაა დაწერილი. ეს კოდი შენს ბრაუზერს ესმის - იგი კონკრეტული მისამართიდან (მაგალითად google.com) მოსულ ფაილებს კითხულობს, იგებს რომელი ელემენტი სად იყოს, როგორ გამოიყურებოდეს, ღილაკზე დაჭერისას რა მოხდეს და ა.შ. `)
        it(`ფუნქციონალის განსასაზღვრად პროგრამირების ენა ჯავასკრიპტი გამოიყენება. საიტის კოდის გარდა, ბრაუზერისთვის ჯავასკრიპტის ბრძანებების გაგზავნა პირდაპირაც შეიძლება. ეს იმაზე მარტივია, ვიდრე წარმოგიდგენია - შემდეგ გვერდზე უკვე გააკეთებ. ახლა უბრალოდ ბრძანებების შესაყვანი სპეციალური ფანჯარა, console, გავხსნათ. ქვემოთ გამოვაჩენ ინსტრუქციას. მომავალში თავიდან გახსნისას ამ ინსტრუქციის გახსენება თუ დაგჭირდა, დააჭირე დახმარების ღილაკს.`)
    })

    CONFIG.isStep(steps.first_line) && describe("3. ჩემი პირველი კოდი", () => {
        toggle('help')
        showMessage('კონსოლის-გამოყენება')
        it(`პროგრამირების ენის ბირთვული კომპონენტი არის განსაზღვრული სინტაქსით სხვადასხვა ფუნქციების გამოძახება და შექმნა. ჯავასკრიპტში, ფუნქციის სახელი შედგება ლათინური და რიცხვითი სიმბოლოებისგან. ფუნქციის გამოძახების სინტაქსი კი ასეთია - დაწერე სახელი და მიუწერე ( ). ჯავასკრიპტის ფუნქციის გამოძახება ბრაუზერის კონსოლიდანაც შეგვიძლია. მისი მუშაობის პრინციპი მარტივია: შენ შეგყავს კოდი და ის აბრუნებს პასუხს, ან ასრულებს დავალებას. მაგალითისთვის, სცადე მომხმარებლისთვის შეტყობინების გაგზავნის ფუნქცია.`)
        it('> alert()')
        it(`მისი გამოძახების შემდეგ პატარა ფანჯარა გამოჩნდება, დახურე იგი და შემდეგ გვერდზე ავტომატურად გადახვალ.`, () => {
            const oldAlert = window.alert
            window.alert = function () {
                oldAlert()
                CONFIG.currentStep++
                CONFIG.save()
                window.location.reload()
            }
            this.fail()
        })

    })

    CONFIG.isStep(steps.function_arguments) && describe('4. ფუნქციის არგუმენტი', () => {
        it(`შეტყობინება ცარიელი მესიჯით არც ისე სახალისოა. კარგი იქნებოდა, ამ ფანჯრისთვის რამე ტექსტის გადაცემა რომ შეგვეძლოს, არა? ჯავასკრიპტში ტექსტი \`""\` სიმბოლოებით არის შემოფარგლული, რომ უბრალო ტექსტი და პროგრამის კოდი ერთმანეთისგან გარჩევადი იყოს. იმისთვის, რომ ეს ტექსტი ფუნქციას “გადავაწოდოთ”, მის არგუმენტად უნდა დავამატოთ. ის \`()\` სიმბოლოები, ფუნქციის სახელის შემდეგ, სწორედ არგუმენტების განსასაზღვრად არის.`)
        it(`> alert(“გამარჯობა, ია”)`, () => {
            const oldAlert = window.alert
            window.alert = function (text) {
                if (!text || text.length < 1) {
                    console.error('ტექსტი არ შეგიყვანია! თავიდან სცადე')
                } else if (!text.startsWith('გამარჯობა')) {
                    console.error('ტექსტი გამარჯობით დაიწყე, თავაზიანად ვესაუბროთ საკუთარ თავს')
                } else if (text.length < 'გამარჯობა '.length + 2) {
                    console.error('და შენი სახელი?')
                } else {
                        oldAlert(text)
                        CONFIG.currentStep++
                        CONFIG.save()
                        window.location.reload()
                }
            }
            this.fail()
        })
        it('თუ კონსოლმა ReferenceError დაგიწერა, ე.ი. ტექსტის ბრჭყალებით შემოფარგვლა დაგავიწყდა')
    })

    CONFIG.isStep(steps.variables) && describe('5. ცვლადი', () => {
        it(`მხოლოდ ფუნქციები, მონაცემების გარეშე გამოუსედაგარი იქნებოდა. ამიტომ პროგრამირების ენის კიდევ ერთი ცენტრალური ნაწილი ცვლადებია - სხვადასხვა მნიშვნელობების შექმნა, შეცვლა და მათი წაკითხვა საჭირო დროს. მაგალითად, კოდში გვჭირდება დავიმახსოვროთ მომხმარებლის სახელი.`)
        it(`ახალი ცვლადის შექმნის სინტაქსი ასეთია:`)
        it(`> var myName = “ამ ტექსტის მაგივრად ჩაწერე შენი სახელი”`)
        it(`ახლა, ცვლადის სახელს თუ შეიყვან, კონსოლში მისი მნიშვნელობა გამოჩნდება. დაიმახსოვრე, ჯავასკრიპტი case sensitive არის - myName და myname სხვადასხვა სიტყვებია. არ გამოგრჩეს ხოლმე სიმბოლოს case (uppercase - N, lowercase - n).`)
        it(`> myName`)
        it(`შეგიძლია სხვა ტექსტსაც “მიაკერო”`)
        it(`> “გამარჯობა, “ + myName`)
        it(`და ეს მნიშვნელობა სხვა ცვლადში შეინახო`)
        it(`> var greeting = “გამარჯობა, “ + myName`)
        it(`თუ ცვლადს ფუნქციას გადააწვდი, ისიც შეძლებს მნიშვნელობის წაკითხვას`)
        it(`> alert(myName)`)
    })

    CONFIG.isStep(steps.where_were_we) && describe("6. სად ვიყავით?", () => {
        it(`რამდენიმე ხაზში უკვე დიდი პროგრესი გაქვს!   მაგრამ რაღაც უნდა გაგვეკეთებინა კბილის ჩხირზე, გახსოვს? როგორც შეგპირდი, ამოცანას ნაბიჯ-ნაბიჯ ამოვხსნით. ენციკლოპედიის მაგივრად უბრალო წინადადებაზე გავაკეთოთ - მხოლოდ ინგლისური ანბანი, სასვენი ნიშნების გარეშე. დასრულების შემდეგ, ამოხსნის იდეურ გავრცობას წინადადებიდან წიგნამდე შენ მოგანდობ.`)

        it(`პირველი ნაბიჯი: ტექსტში თითოეული სიმბოლო რიცხვად უნდა გადავაქციოთ.`)

        it(`ა-ჰ: 01-33, space: 34`)

        it(`ეს ფუნქცია, letterToNumber, უკვე შევქმენი. სცადე გამოძახება.`)
        
        it(`> letterToNumber(‘ა’)`)
    })

    CONFIG.isStep(steps.done) && describe("🥳", () => {
        toggle('help')
        showMessage('success')
    })

}

window.letterToNumber = function (letter) {
    const georgianAlphabet = 'აბგდევზთიკლმნოპჟრსტუფქღყშჩცძწჭხჯჰ'
    if (letter === ' ') {
        return "34"
    }
    if (!georgianAlphabet.includes(letter)) {
        throw `ამ სიმბოლოსთვის ენკოდირება არ გვაქვს!`
    }
    return (georgianAlphabet.indexOf(letter) + 1).toString().padStart(2, '0')
}